//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

import ByteBuf from '../bright/serialization/ByteBuf'
import BeanBase from '../bright/serialization/BeanBase'

import Vector2 from '../bright/math/Vector2'
import Vector3 from '../bright/math/Vector3'
import Vector4 from '../bright/math/Vector4'


export namespace test {
export enum ETestQuality {
    /**
     * 最高品质
     */
    A = 1,
    /**
     * 黑色的
     */
    B = 2,
    /**
     * 蓝色的
     */
    C = 3,
    /**
     * 最差品质
     */
    D = 4,
}
}

export namespace test {
export enum AccessFlag {
    WRITE = 1,
    READ = 2,
    TRUNCATE = 4,
    NEW = 8,
    READ_WRITE = WRITE|READ,
}
}

export namespace game {
export class TbLocalInfo {
    private _dataMap: Map<string, game.LocalInfo>
    private _dataList: game.LocalInfo[]
    
    constructor(_buf_: ByteBuf) {
        this._dataMap = new Map<string, game.LocalInfo>()
        this._dataList = []
        
        for(let n = _buf_.ReadInt() ; n > 0 ; n--) {
            let _v: game.LocalInfo
            _v = new game.LocalInfo(_buf_)
            this._dataList.push(_v)
            this._dataMap.set(_v.locaInfo, _v)
        }
    }

    getDataMap(): Map<string, game.LocalInfo> { return this._dataMap }
    getDataList(): game.LocalInfo[] { return this._dataList }

    get(key: string): game.LocalInfo | undefined { return this._dataMap.get(key) }

    resolve(_tables: Map<string, any>) {
        for(var v of this._dataList) {
            v.resolve(_tables)
        }
    }

}
}




export namespace game {
export  class LocalInfo  {

    constructor(_buf_: ByteBuf) {
        this.locaInfo = _buf_.ReadString()
        this.soundState = _buf_.ReadString()
        this.vibrateState = _buf_.ReadString()
        this.musicState = _buf_.ReadString()
        this.level = _buf_.ReadString()
        this.levelTubeSaveInfo = _buf_.ReadString()
        this.useTubeSkinId = _buf_.ReadString()
        this.useBallSkinId = _buf_.ReadString()
        this.useBgId = _buf_.ReadString()
        this.tempTubeHasBallNum = _buf_.ReadString()
        this.pauseUseNum = _buf_.ReadString()
        this.addTubeUseNum = _buf_.ReadString()
        this.pack = _buf_.ReadString()
        this.coinNum = _buf_.ReadString()
    }

    /**
     * 表名
     */
    readonly locaInfo: string
    /**
     * 音效开启状态1开0关
     */
    readonly soundState: string
    /**
     * 震动开启状态
     */
    readonly vibrateState: string
    /**
     * 背景音乐状态
     */
    readonly musicState: string
    /**
     * 普通模式关卡
     */
    readonly level: string
    /**
     * 普通模式关卡进度保存
     */
    readonly levelTubeSaveInfo: string
    /**
     * 试管使用的皮肤
     */
    readonly useTubeSkinId: string
    /**
     * 球皮肤
     */
    readonly useBallSkinId: string
    /**
     * 使用背景id
     */
    readonly useBgId: string
    /**
     * 临时试管卡槽容量(0为不存在)
     */
    readonly tempTubeHasBallNum: string
    /**
     * 回退一步使用次数
     */
    readonly pauseUseNum: string
    /**
     * 增加临时试管格子
     */
    readonly addTubeUseNum: string
    /**
     * 拥有物品,state(是否拥有1有0无)
     */
    readonly pack: string
    /**
     * 金币数量
     */
    readonly coinNum: string

    resolve(_tables: Map<string, any>) {
    }
}

}


export namespace game {
export class TbConstant {
    private _dataMap: Map<string, game.Constant>
    private _dataList: game.Constant[]
    
    constructor(_buf_: ByteBuf) {
        this._dataMap = new Map<string, game.Constant>()
        this._dataList = []
        
        for(let n = _buf_.ReadInt() ; n > 0 ; n--) {
            let _v: game.Constant
            _v = new game.Constant(_buf_)
            this._dataList.push(_v)
            this._dataMap.set(_v.constValue, _v)
        }
    }

    getDataMap(): Map<string, game.Constant> { return this._dataMap }
    getDataList(): game.Constant[] { return this._dataList }

    get(key: string): game.Constant | undefined { return this._dataMap.get(key) }

    resolve(_tables: Map<string, any>) {
        for(var v of this._dataList) {
            v.resolve(_tables)
        }
    }

}
}




export namespace game {
export  class Constant  {

    constructor(_buf_: ByteBuf) {
        this.constValue = _buf_.ReadString()
        this.maxLevel = _buf_.ReadInt()
    }

    /**
     * 表名
     */
    readonly constValue: string
    /**
     * 最大关卡
     */
    readonly maxLevel: number

    resolve(_tables: Map<string, any>) {
    }
}

}


export namespace game {
export class TbLevel {
    private _dataMap: Map<number, game.Level>
    private _dataList: game.Level[]
    
    constructor(_buf_: ByteBuf) {
        this._dataMap = new Map<number, game.Level>()
        this._dataList = []
        
        for(let n = _buf_.ReadInt() ; n > 0 ; n--) {
            let _v: game.Level
            _v = new game.Level(_buf_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, game.Level> { return this._dataMap }
    getDataList(): game.Level[] { return this._dataList }

    get(key: number): game.Level | undefined { return this._dataMap.get(key) }

    resolve(_tables: Map<string, any>) {
        for(var v of this._dataList) {
            v.resolve(_tables)
        }
    }

}
}




export namespace game {
export  class Level  {

    constructor(_buf_: ByteBuf) {
        this.id = _buf_.ReadInt()
        { this.tubes = []; for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e :number[]; { _e = []; for(let i = 0, n = _buf_.ReadSize() ; i < n ; i++) { let _e :number; _e = _buf_.ReadInt(); _e.push(_e) } }; this.tubes.push(_e) } }
    }

    /**
     * 关卡id
     */
    readonly id: number
    /**
     * 试管数据
     */
    readonly tubes: number[][]

    resolve(_tables: Map<string, any>) {
    }
}

}


export namespace game {
export class TbTube {
    private _dataMap: Map<number, game.TubeInfo>
    private _dataList: game.TubeInfo[]
    
    constructor(_buf_: ByteBuf) {
        this._dataMap = new Map<number, game.TubeInfo>()
        this._dataList = []
        
        for(let n = _buf_.ReadInt() ; n > 0 ; n--) {
            let _v: game.TubeInfo
            _v = new game.TubeInfo(_buf_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, game.TubeInfo> { return this._dataMap }
    getDataList(): game.TubeInfo[] { return this._dataList }

    get(key: number): game.TubeInfo | undefined { return this._dataMap.get(key) }

    resolve(_tables: Map<string, any>) {
        for(var v of this._dataList) {
            v.resolve(_tables)
        }
    }

}
}




export namespace game {
export  class TubeInfo  {

    constructor(_buf_: ByteBuf) {
        this.id = _buf_.ReadInt()
        this.icon = _buf_.ReadString()
        this.shopShowIcon = _buf_.ReadString()
    }

    /**
     * 试管id
     */
    readonly id: number
    /**
     * 图标
     */
    readonly icon: string
    /**
     * 商店展示图标
     */
    readonly shopShowIcon: string

    resolve(_tables: Map<string, any>) {
    }
}

}


export namespace game {
export class TbBallSkin {
    private _dataMap: Map<number, game.BallSkin>
    private _dataList: game.BallSkin[]
    
    constructor(_buf_: ByteBuf) {
        this._dataMap = new Map<number, game.BallSkin>()
        this._dataList = []
        
        for(let n = _buf_.ReadInt() ; n > 0 ; n--) {
            let _v: game.BallSkin
            _v = new game.BallSkin(_buf_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, game.BallSkin> { return this._dataMap }
    getDataList(): game.BallSkin[] { return this._dataList }

    get(key: number): game.BallSkin | undefined { return this._dataMap.get(key) }

    resolve(_tables: Map<string, any>) {
        for(var v of this._dataList) {
            v.resolve(_tables)
        }
    }

}
}




export namespace game {
export  class BallSkin  {

    constructor(_buf_: ByteBuf) {
        this.id = _buf_.ReadInt()
        this.icon = _buf_.ReadString()
        this.shopShowIcon = _buf_.ReadString()
    }

    /**
     * 皮肤id
     */
    readonly id: number
    /**
     * 球图标前缀
     */
    readonly icon: string
    /**
     * 商店展示图标
     */
    readonly shopShowIcon: string

    resolve(_tables: Map<string, any>) {
    }
}

}


export namespace game {
export class TbGameBg {
    private _dataMap: Map<number, game.GameBgInfo>
    private _dataList: game.GameBgInfo[]
    
    constructor(_buf_: ByteBuf) {
        this._dataMap = new Map<number, game.GameBgInfo>()
        this._dataList = []
        
        for(let n = _buf_.ReadInt() ; n > 0 ; n--) {
            let _v: game.GameBgInfo
            _v = new game.GameBgInfo(_buf_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, game.GameBgInfo> { return this._dataMap }
    getDataList(): game.GameBgInfo[] { return this._dataList }

    get(key: number): game.GameBgInfo | undefined { return this._dataMap.get(key) }

    resolve(_tables: Map<string, any>) {
        for(var v of this._dataList) {
            v.resolve(_tables)
        }
    }

}
}




export namespace game {
export  class GameBgInfo  {

    constructor(_buf_: ByteBuf) {
        this.id = _buf_.ReadInt()
        this.shopShowIcon = _buf_.ReadString()
        this.bgColor = _buf_.ReadString()
        this.bgTopImg = _buf_.ReadString()
        this.allBgImg = _buf_.ReadString()
    }

    /**
     * 皮肤id
     */
    readonly id: number
    /**
     * 商店展示图标
     */
    readonly shopShowIcon: string
    /**
     * 背景颜色
     */
    readonly bgColor: string
    /**
     * 背景顶图
     */
    readonly bgTopImg: string
    /**
     * 全背景图
     */
    readonly allBgImg: string

    resolve(_tables: Map<string, any>) {
    }
}

}


export namespace game {
export class TbShop {
    private _dataMap: Map<number, game.Shop>
    private _dataList: game.Shop[]
    
    constructor(_buf_: ByteBuf) {
        this._dataMap = new Map<number, game.Shop>()
        this._dataList = []
        
        for(let n = _buf_.ReadInt() ; n > 0 ; n--) {
            let _v: game.Shop
            _v = new game.Shop(_buf_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, game.Shop> { return this._dataMap }
    getDataList(): game.Shop[] { return this._dataList }

    get(key: number): game.Shop | undefined { return this._dataMap.get(key) }

    resolve(_tables: Map<string, any>) {
        for(var v of this._dataList) {
            v.resolve(_tables)
        }
    }

}
}




export namespace game {
export  class Shop  {

    constructor(_buf_: ByteBuf) {
        this.id = _buf_.ReadInt()
        this.type = _buf_.ReadInt()
        this.itemBasePath = _buf_.ReadString()
        this.title = _buf_.ReadString()
    }

    /**
     * 商店id
     */
    readonly id: number
    /**
     * 类型1试管、2主题、3球皮肤
     */
    readonly type: number
    /**
     * 文件路径
     */
    readonly itemBasePath: string
    /**
     * 标题
     */
    readonly title: string

    resolve(_tables: Map<string, any>) {
    }
}

}


export namespace game {
export class TbShopItem {
    private _dataMap: Map<number, game.ShopItem>
    private _dataList: game.ShopItem[]
    
    constructor(_buf_: ByteBuf) {
        this._dataMap = new Map<number, game.ShopItem>()
        this._dataList = []
        
        for(let n = _buf_.ReadInt() ; n > 0 ; n--) {
            let _v: game.ShopItem
            _v = new game.ShopItem(_buf_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, game.ShopItem> { return this._dataMap }
    getDataList(): game.ShopItem[] { return this._dataList }

    get(key: number): game.ShopItem | undefined { return this._dataMap.get(key) }

    resolve(_tables: Map<string, any>) {
        for(var v of this._dataList) {
            v.resolve(_tables)
        }
    }

}
}




export namespace game {
export  class ShopItem  {

    constructor(_buf_: ByteBuf) {
        this.id = _buf_.ReadInt()
        this.rewardId = _buf_.ReadInt()
        this.unLockLevel = _buf_.ReadInt()
        this.unLockConditionType = _buf_.ReadInt()
        this.needCoin = _buf_.ReadInt()
    }

    /**
     * 商店物品id(商店id+后面)
     */
    readonly id: number
    /**
     * 奖励id
     */
    readonly rewardId: number
    /**
     * 解锁关卡
     */
    readonly unLockLevel: number
    /**
     * 解锁条件类型1免费2金币3视频
     */
    readonly unLockConditionType: number
    /**
     * 需要花费金币
     */
    readonly needCoin: number

    resolve(_tables: Map<string, any>) {
    }
}

}



type ByteBufLoader = (file: string) => ByteBuf

export class Tables {
    private _TbLocalInfo: game.TbLocalInfo
    get TbLocalInfo(): game.TbLocalInfo  { return this._TbLocalInfo}
    private _TbConstant: game.TbConstant
    get TbConstant(): game.TbConstant  { return this._TbConstant}
    private _TbLevel: game.TbLevel
    get TbLevel(): game.TbLevel  { return this._TbLevel}
    private _TbTube: game.TbTube
    get TbTube(): game.TbTube  { return this._TbTube}
    private _TbBallSkin: game.TbBallSkin
    get TbBallSkin(): game.TbBallSkin  { return this._TbBallSkin}
    private _TbGameBg: game.TbGameBg
    get TbGameBg(): game.TbGameBg  { return this._TbGameBg}
    private _TbShop: game.TbShop
    get TbShop(): game.TbShop  { return this._TbShop}
    private _TbShopItem: game.TbShopItem
    get TbShopItem(): game.TbShopItem  { return this._TbShopItem}

    constructor(loader: ByteBufLoader) {
        let tables = new Map<string, any>()
        this._TbLocalInfo = new game.TbLocalInfo(loader('game_tblocalinfo')) 
        tables.set('game.TbLocalInfo', this._TbLocalInfo)
        this._TbConstant = new game.TbConstant(loader('game_tbconstant')) 
        tables.set('game.TbConstant', this._TbConstant)
        this._TbLevel = new game.TbLevel(loader('game_tblevel')) 
        tables.set('game.TbLevel', this._TbLevel)
        this._TbTube = new game.TbTube(loader('game_tbtube')) 
        tables.set('game.TbTube', this._TbTube)
        this._TbBallSkin = new game.TbBallSkin(loader('game_tbballskin')) 
        tables.set('game.TbBallSkin', this._TbBallSkin)
        this._TbGameBg = new game.TbGameBg(loader('game_tbgamebg')) 
        tables.set('game.TbGameBg', this._TbGameBg)
        this._TbShop = new game.TbShop(loader('game_tbshop')) 
        tables.set('game.TbShop', this._TbShop)
        this._TbShopItem = new game.TbShopItem(loader('game_tbshopitem')) 
        tables.set('game.TbShopItem', this._TbShopItem)

        this._TbLocalInfo.resolve(tables) 
        this._TbConstant.resolve(tables) 
        this._TbLevel.resolve(tables) 
        this._TbTube.resolve(tables) 
        this._TbBallSkin.resolve(tables) 
        this._TbGameBg.resolve(tables) 
        this._TbShop.resolve(tables) 
        this._TbShopItem.resolve(tables) 
    }
}
