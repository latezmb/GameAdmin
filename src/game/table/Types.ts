//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


export class Vector2 {
    static deserializeFromJson(json: any): Vector2 {
        let x = json.x
        let y = json.y
        if (x == null || y == null) {
            throw new Error()
        }
        return new Vector2(x, y)
    }

    x: number
    y: number
    constructor(x: number = 0, y: number = 0) {
        this.x = x
        this.y = y
    }
}

export class Vector3 {
    static deserializeFromJson(json: any): Vector3 {
        let x = json.x
        let y = json.y
        let z = json.z
        if (x == null || y == null || z == null) {
            throw new Error()
        }
        return new Vector3(x, y, z)
    }

    x: number
    y: number
    z: number

    constructor(x: number = 0, y: number = 0, z: number = 0) {
        this.x = x
        this.y = y
        this.z = z
    }
}

export class Vector4 {
    static deserializeFromJson(json: any): Vector4 {
        let x = json.x
        let y = json.y
        let z = json.z
        let w = json.w
        if (x == null || y == null || z == null || w == null) {
            throw new Error()
        }
        return new Vector4(x, y, z, w)
    }
    
    x: number
    y: number
    z: number
    w: number

    constructor(x: number = 0, y: number = 0, z: number = 0, w: number = 0) {
        this.x = x
        this.y = y
        this.z = z
        this.w = w
    }
}


export namespace test {
export enum ETestQuality {
    /**
     * 最高品质
     */
    A = 1,
    /**
     * 黑色的
     */
    B = 2,
    /**
     * 蓝色的
     */
    C = 3,
    /**
     * 最差品质
     */
    D = 4,
}
}

export namespace test {
export enum AccessFlag {
    WRITE = 1,
    READ = 2,
    TRUNCATE = 4,
    NEW = 8,
    READ_WRITE = WRITE|READ,
}
}

export namespace game {
export class TbLocalInfo{
    private _dataMap: Map<string, game.LocalInfo>
    private _dataList: game.LocalInfo[]
    constructor(_json_: any) {
        this._dataMap = new Map<string, game.LocalInfo>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: game.LocalInfo
            _v = new game.LocalInfo(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.locaInfo, _v)
        }
    }

    getDataMap(): Map<string, game.LocalInfo> { return this._dataMap; }
    getDataList(): game.LocalInfo[] { return this._dataList; }

    get(key: string): game.LocalInfo | undefined { return this._dataMap.get(key); }

    resolve(_tables: Map<string, any>) {
        for(var v of this._dataList) {
            v.resolve(_tables)
        }
    }

}
}



export namespace game {
export class LocalInfo {

    constructor(_json_: any) {
        if (_json_.locaInfo === undefined) { throw new Error() }
        this.locaInfo = _json_.locaInfo
        if (_json_.version === undefined) { throw new Error() }
        this.version = _json_.version
        if (_json_.localVersion === undefined) { throw new Error() }
        this.localVersion = _json_.localVersion
        if (_json_.userId === undefined) { throw new Error() }
        this.userId = _json_.userId
        if (_json_.soundState === undefined) { throw new Error() }
        this.soundState = _json_.soundState
        if (_json_.vibrateState === undefined) { throw new Error() }
        this.vibrateState = _json_.vibrateState
        if (_json_.musicState === undefined) { throw new Error() }
        this.musicState = _json_.musicState
        if (_json_.level === undefined) { throw new Error() }
        this.level = _json_.level
        if (_json_.levelTubeSaveInfo === undefined) { throw new Error() }
        this.levelTubeSaveInfo = _json_.levelTubeSaveInfo
        if (_json_.useTubeSkinId === undefined) { throw new Error() }
        this.useTubeSkinId = _json_.useTubeSkinId
        if (_json_.useBallSkinId === undefined) { throw new Error() }
        this.useBallSkinId = _json_.useBallSkinId
        if (_json_.useBgId === undefined) { throw new Error() }
        this.useBgId = _json_.useBgId
        if (_json_.tempTubeHasBallNum === undefined) { throw new Error() }
        this.tempTubeHasBallNum = _json_.tempTubeHasBallNum
        if (_json_.pauseUseNum === undefined) { throw new Error() }
        this.pauseUseNum = _json_.pauseUseNum
        if (_json_.addTubeUseNum === undefined) { throw new Error() }
        this.addTubeUseNum = _json_.addTubeUseNum
        if (_json_.addTime === undefined) { throw new Error() }
        this.addTime = _json_.addTime
        if (_json_.jumpLevelNum === undefined) { throw new Error() }
        this.jumpLevelNum = _json_.jumpLevelNum
        if (_json_.pack === undefined) { throw new Error() }
        this.pack = _json_.pack
        if (_json_.coinNum === undefined) { throw new Error() }
        this.coinNum = _json_.coinNum
        if (_json_.starNum === undefined) { throw new Error() }
        this.starNum = _json_.starNum
        if (_json_.currentChallengeLevel === undefined) { throw new Error() }
        this.currentChallengeLevel = _json_.currentChallengeLevel
        if (_json_.challengeLevelInfo === undefined) { throw new Error() }
        this.challengeLevelInfo = _json_.challengeLevelInfo
        if (_json_.isFristGame === undefined) { throw new Error() }
        this.isFristGame = _json_.isFristGame
        if (_json_.gameTime === undefined) { throw new Error() }
        this.gameTime = _json_.gameTime
        if (_json_.levelTubeWenHaoSaveInfo === undefined) { throw new Error() }
        this.levelTubeWenHaoSaveInfo = _json_.levelTubeWenHaoSaveInfo
        if (_json_.isGetCollectReward === undefined) { throw new Error() }
        this.isGetCollectReward = _json_.isGetCollectReward
        if (_json_.isGetZhuoMianReward === undefined) { throw new Error() }
        this.isGetZhuoMianReward = _json_.isGetZhuoMianReward
        if (_json_.resultShareTimeStamp === undefined) { throw new Error() }
        this.resultShareTimeStamp = _json_.resultShareTimeStamp
        if (_json_.isFristSignIn === undefined) { throw new Error() }
        this.isFristSignIn = _json_.isFristSignIn
        if (_json_.signInData === undefined) { throw new Error() }
        this.signInData = _json_.signInData
        if (_json_.signInTime === undefined) { throw new Error() }
        this.signInTime = _json_.signInTime
        if (_json_.topSignInDay === undefined) { throw new Error() }
        this.topSignInDay = _json_.topSignInDay
        if (_json_.fightTipSignIn === undefined) { throw new Error() }
        this.fightTipSignIn = _json_.fightTipSignIn
        if (_json_.mainTipSignIn === undefined) { throw new Error() }
        this.mainTipSignIn = _json_.mainTipSignIn
        if (_json_.tipSignInTimeStamp === undefined) { throw new Error() }
        this.tipSignInTimeStamp = _json_.tipSignInTimeStamp
        if (_json_.repairDataVersion === undefined) { throw new Error() }
        this.repairDataVersion = _json_.repairDataVersion
        if (_json_.competitionScore === undefined) { throw new Error() }
        this.competitionScore = _json_.competitionScore
        if (_json_.competitionDan === undefined) { throw new Error() }
        this.competitionDan = _json_.competitionDan
        if (_json_.competitionTopDan === undefined) { throw new Error() }
        this.competitionTopDan = _json_.competitionTopDan
        if (_json_.competitionTime === undefined) { throw new Error() }
        this.competitionTime = _json_.competitionTime
        if (_json_.competitionNikeName === undefined) { throw new Error() }
        this.competitionNikeName = _json_.competitionNikeName
        if (_json_.competitionReward === undefined) { throw new Error() }
        this.competitionReward = _json_.competitionReward
    }

    /**
     * 表名
     */
    readonly locaInfo: string
    /**
     * 版本(修复数据版本)
     */
    readonly version: string
    /**
     * 本地数据结构版本
     */
    readonly localVersion: string
    /**
     * 唯一id
     */
    readonly userId: string
    /**
     * 音效开启状态1开0关
     */
    readonly soundState: string
    /**
     * 震动开启状态
     */
    readonly vibrateState: string
    /**
     * 背景音乐状态
     */
    readonly musicState: string
    /**
     * 普通模式关卡
     */
    readonly level: string
    /**
     * 普通模式关卡进度保存
     */
    readonly levelTubeSaveInfo: string
    /**
     * 试管使用的皮肤
     */
    readonly useTubeSkinId: string
    /**
     * 球皮肤
     */
    readonly useBallSkinId: string
    /**
     * 使用背景id
     */
    readonly useBgId: string
    /**
     * 临时试管卡槽容量(0为不存在)
     */
    readonly tempTubeHasBallNum: string
    /**
     * 回退一步使用次数
     */
    readonly pauseUseNum: string
    /**
     * 增加临时试管格子
     */
    readonly addTubeUseNum: string
    /**
     * 增加时间道具
     */
    readonly addTime: string
    /**
     * 跳过关卡道具
     */
    readonly jumpLevelNum: string
    /**
     * 拥有物品,state(是否拥有1有0无)
     */
    readonly pack: string
    /**
     * 金币数量
     */
    readonly coinNum: string
    /**
     * 通关累计星星数量
     */
    readonly starNum: string
    /**
     * 当前挑战关卡
     */
    readonly currentChallengeLevel: string
    /**
     * 挑战关卡保存数据state:0未解锁，1解锁，2完成,videoNum：观看视频次数
     */
    readonly challengeLevelInfo: string
    /**
     * 是否第一次玩
     */
    readonly isFristGame: string
    /**
     * 剩余时间
     */
    readonly gameTime: string
    /**
     * 问号类型保存
     */
    readonly levelTubeWenHaoSaveInfo: string
    /**
     * 收藏奖励是否领取,0没领取，1领取
     */
    readonly isGetCollectReward: string
    /**
     * 添加到桌面奖励是否领取,0没领取，1领取
     */
    readonly isGetZhuoMianReward: string
    /**
     * 结算界面上次记录的分享当天0时的时间戳
     */
    readonly resultShareTimeStamp: string
    /**
     * 是否是首轮签到
     */
    readonly isFristSignIn: string
    /**
     * 签到数据{1:1},{天数,0没签到、1签到}
     */
    readonly signInData: string
    /**
     * 签到当天的0点时间戳
     */
    readonly signInTime: string
    /**
     * 上次签到的天数是第几天
     */
    readonly topSignInDay: string
    /**
     * 战斗中弹的签到弹窗
     */
    readonly fightTipSignIn: string
    /**
     * 主界面中弹的签到弹窗
     */
    readonly mainTipSignIn: string
    /**
     * 触发主动弹的时间戳
     */
    readonly tipSignInTimeStamp: string
    /**
     * 修复数据版本
     */
    readonly repairDataVersion: string
    /**
     * 竞赛积分
     */
    readonly competitionScore: string
    /**
     * 竞赛段位
     */
    readonly competitionDan: string
    /**
     * 上个赛季竞赛段位
     */
    readonly competitionTopDan: string
    /**
     * 每赛季第一天（周日）的0点时间戳
     */
    readonly competitionTime: string
    /**
     * 赛季昵称数据
     */
    readonly competitionNikeName: string
    /**
     * 首次领取记录{阶段id:{&quot;state&quot;:1}}1为领取，0未领取
     */
    readonly competitionReward: string

    resolve(_tables: Map<string, any>) {
    }
}

}

export namespace game {
export class TbConstant{
    private _dataMap: Map<string, game.Constant>
    private _dataList: game.Constant[]
    constructor(_json_: any) {
        this._dataMap = new Map<string, game.Constant>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: game.Constant
            _v = new game.Constant(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.constValue, _v)
        }
    }

    getDataMap(): Map<string, game.Constant> { return this._dataMap; }
    getDataList(): game.Constant[] { return this._dataList; }

    get(key: string): game.Constant | undefined { return this._dataMap.get(key); }

    resolve(_tables: Map<string, any>) {
        for(var v of this._dataList) {
            v.resolve(_tables)
        }
    }

}
}



export namespace game {
export class Constant {

    constructor(_json_: any) {
        if (_json_.constValue === undefined) { throw new Error() }
        this.constValue = _json_.constValue
        if (_json_.maxLevel === undefined) { throw new Error() }
        this.maxLevel = _json_.maxLevel
    }

    /**
     * 表名
     */
    readonly constValue: string
    /**
     * 最大关卡
     */
    readonly maxLevel: number

    resolve(_tables: Map<string, any>) {
    }
}

}


type JsonLoader = (file: string) => any

export class Tables {
    private _TbLocalInfo: game.TbLocalInfo
    get TbLocalInfo(): game.TbLocalInfo  { return this._TbLocalInfo;}
    private _TbConstant: game.TbConstant
    get TbConstant(): game.TbConstant  { return this._TbConstant;}

    constructor(loader: JsonLoader) {
        let tables = new Map<string, any>()
        this._TbLocalInfo = new game.TbLocalInfo(loader('game_tblocalinfo'))
        tables.set('game.TbLocalInfo', this._TbLocalInfo)
        this._TbConstant = new game.TbConstant(loader('game_tbconstant'))
        tables.set('game.TbConstant', this._TbConstant)

        this._TbLocalInfo.resolve(tables)
        this._TbConstant.resolve(tables)
    }
}
